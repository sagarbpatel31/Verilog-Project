
module AVR_TIMER(
	input clk,
	input [7:0] ocr_pwm,
	input [7:0] inp_ctc,
	input [2:0] main_sel,
	input [1:0] mode_sel,
	input p,
	output reg [7:0] a,
	output reg out,
	output reg flag_fpwm,
	output reg flag_normal_overflow,
	output reg flag_phasepwm,
	output reg flag_ctc_compare
    );
reg [3:0] count;
reg [3:0] pcorrect;
reg [10:0] c;
reg [7:0] count_ctc;
integer pl;
reg [4:0] count_normal;
initial
begin
		c=0;
		a=8'd0;
		count_normal=0;
		count=0;
		pcorrect=0;
		count_ctc=0;
		flag_ctc_compare=0;
		flag_normal_overflow=0;
		flag_fpwm=0;
		flag_phasepwm=0;
		pl=8;
end
always @(posedge clk)
begin

		a[0]=p;
		a[1]=clk;
			c=c+11'd1;
			if(c%4==0)
			begin	
				a[2]=~a[2];			
				if(c%32==0)
				begin
					a[3]=~a[3];						
					if(c%128==0)
					begin	
						a[4]=~a[4];	
						if(c%512==0)
						begin
							a[5]=~a[5];	
							if(c%1024==0)
							begin	
								a[6]=~a[6];	
								if(c%2048==0)
								begin
									a[7]=~a[7];
									if(c==21'd4096)
										c=0;
								end
							end
						end
					end
				end
	end
	case(main_sel)
		3'b000: out=a[0];
		3'b001: out=a[1];
		3'b010: out=a[2];
		3'b011: out=a[3];
		3'b100: out=a[4];
		3'b101: out=a[5];
		3'b110: out=a[6];
		3'b111: out=a[7];
		default: out=a[0];
		
	endcase
	
	case (mode_sel)
		2'b00:
					if(out==1)
					begin						
						if(count_normal<20)
						begin
							count_normal=count_normal+5'd1;
							flag_normal_overflow=0;
						end
						else if(count_normal==20)
						begin
							count_normal=0;
							flag_normal_overflow=1;
						end
					end
		2'b01:
					if(out==1)
					begin
						if(count_ctc<inp_ctc)
						begin
							count_ctc=count_ctc+8'd1;
							flag_ctc_compare=0;
						end
						else if(count_ctc==inp_ctc)
						begin
							count_ctc=0;
							flag_ctc_compare=1;
						end
					
					end
		2'b10:  
						if(pcorrect<8)
						begin			
							pcorrect=pcorrect+4'd1;
							if(pcorrect==ocr_pwm)
								flag_phasepwm=1;
						end
						else if(pcorrect==8)
						begin
							pl=pl-4'd1;
							if(pl>ocr_pwm)
								flag_phasepwm=1;
							else if(pl==ocr_pwm)
								flag_phasepwm=0;
							else if(pl==0)
							begin
								pl=8;
								pcorrect=0;
							end		
						end
		2'b11:	
						if(count<8)
						begin
							count=count+4'd1;
							if(count==ocr_pwm)
								flag_fpwm=1;
						end
						else if(count==8)
						begin
							flag_fpwm=0;
							count=0;
						end
		default: count=0;		
	endcase
	
	
	
end

endmodule

